{
  "name": "eiszeit-docker",
  "version": "0.1.1",
  "config": {
    "imageRepo": "willhoeftit/eiszeit",
    "imageName": "eiszeit",
    "imagePort": "8984",
    "imageDataVol": "/srv/basex/data",
    "externalPort": "3000",
    "externalDataVol": "eiszeit-data"
  },
  "scripts": {
    "TODO_predocker:build": "npm run build # TODO: would be nice to run frontend build from here",
    "docker:build": "docker_dir=$PWD && cd .. && cross-conf-env docker image build -f $docker_dir/Dockerfile . -t $npm_package_config_imageRepo:$npm_package_version",
    "postdocker:build": "npm run docker:tag",
    "docker:tag": " cross-conf-env docker image tag $npm_package_config_imageRepo:$npm_package_version $npm_package_config_imageRepo:latest",
    "docker:run": "run-s -c docker:clean docker:runHelper",
    "docker:runHelper": "cross-conf-env docker run -e NODE_ENV=local --name $npm_package_config_imageName -d -p $npm_package_config_externalPort:npm_package_config_imagePort -v $npm_package_config_externalDataVol:$npm_package_config_imageDataVol $npm_package_config_imageRepo",
    "predocker:publish": "echo Attention! Ensure `docker login` is correct.",
    "docker:publish": "cross-conf-env docker image push $npm_package_config_imageRepo:$npm_package_version",
    "postdocker:publish": "cross-conf-env docker image push $npm_package_config_imageRepo:latest",
    "docker:clean": "cross-conf-env docker rm -f $npm_package_config_imageName",
    "docker:clean:data": "cross-conf-env docker volume rm $npm_package_config_externalDataVol",
    "predocker:taillogs": "echo Web Server Logs:",
    "docker:taillogs": "cross-conf-env docker logs -f $npm_package_config_imageName",
    "docker:open:linux": "echo Trying to launch on Linux && sleep 5 && URL=http://localhost:$npm_package_config_imagePort && xdg-open $URL",
    "docker:open:win": "echo Trying to launch on Windows && timeout 5 && start http://localhost:%npm_package_config_imagePort%",
    "docker:open:mac": "echo Trying to launch on MacOs && sleep 5 && URL=http://localhost:$npm_package_config_imagePort && open $URL",
    "docker:debugmessage": "echo Docker Debug Completed Successfully! Hit Ctrl+C to terminate log tailing.",
    "predocker:debug": "run-s docker:build docker:run",
    "docker:debug": "run-p -c docker:open:linux docker:debugmessage docker:taillogs",
    "testenv:test": "docker_dir=$PWD && echo dir-first:$PWD && cd .. && echo dir-after: $PWD && echo dir-saved: $docker_dir"
  },
  "devDependencies": {
    "cross-conf-env": "^1.3.0",
    "npm-run-all": "^4.1.5"
  }
}
